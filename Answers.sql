--BASIC SQL QUESTIONS
--(Simple aggregation, filtering, sorting)

--1.List all pizzas along with their sizes and prices.
SELECT pizza_id,size,price
FROM pizzas;

--2.Find all pizza types that belong to the “Chicken” category.
SELECT *
FROM pizza_types
WHERE category='Chicken';

--3.Count the total number of pizza types available.
SELECT COUNT(name) AS total_pizza_types
FROM pizza_types;

--4.Show all orders placed on 2015-01-01.
SELECT * FROM orders
WHERE date='2015-01-01';

--5.List all pizzas that cost more than $15.
SELECT * FROM pizzas
WHERE price>15;

--6.Find the total number of orders in the dataset.
SELECT COUNT(order_id) AS total_orders
FROM orders;

--7.List all pizzas in ascending order of price.
SELECT * FROM pizzas
ORDER BY price ASC;

--8.Find the quantity of pizzas in order with order_id = 2.
SELECT SUM(quantity) AS total_pizzas
FROM order_details
WHERE order_id=2;

--9.Retrieve all ingredients for the pizza type “The Big Meat Pizza”.
SELECT name,category,ingredients 
FROM pizza_types
WHERE name='The Big Meat Pizza';

--10.Count how many pizzas exist for each size (S, M, L).
SELECT size,COUNT(size) AS no_of_pizzas
FROM pizzas
GROUP BY size;


--INTERMEDIATE SQL QUESTIONS
--(Joins, grouping, aggregation, filtering with conditions)

--1.List each order with the pizzas ordered and their quantities.
SELECT o.order_id, p.pizza_id, od.quantity
FROM orders o
JOIN order_details od ON od.order_id=o.order_id
JOIN pizzas p ON p.pizza_id = od.pizza_id;

--2.Find the total revenue for each pizza (price × quantity).
SELECT p.pizza_id,SUM(p.price * od.quantity) AS total_revenue
FROM pizzas p 
JOIN order_details od on od.pizza_id=p.pizza_id
GROUP BY p.pizza_id;

--3.Calculate the total revenue for each order.
SELECT o.order_id,SUM(p.price * od.quantity) AS order_revenue
FROM orders o
JOIN order_details od ON od.order_id=o.order_id
JOIN pizzas p ON p.pizza_id=od.pizza_id
GROUP BY o.order_id
ORDER BY O.order_id ASC;

--4.Find the most popular pizza (highest total quantity sold).
SELECT p.pizza_id,SUM(od.quantity) AS total_sold
FROM order_details od
JOIN pizzas p ON p.pizza_id=od.pizza_id
GROUP BY p.pizza_id
ORDER BY total_sold DESC
LIMIT 5;

--5.List the total number of pizzas sold per pizza category (Chicken, Classic, etc.).
SELECT pt.category,SUM(od.quantity) AS total_sold
FROM pizza_types pt
JOIN pizzas p ON p.pizza_type_id=pt.pizza_type_id
JOIN order_details od ON od.pizza_id=p.pizza_id
GROUP BY pt.category
ORDER BY total_sold DESC;

--6.Find the total revenue generated by each pizza category.
SELECT pt.category,SUM(p.price * od.quantity) AS total_revenue
FROM pizza_types pt
JOIN pizzas p ON p.pizza_type_id=pt.pizza_type_id
JOIN order_details od ON od.pizza_id=p.pizza_id
GROUP BY pt.category
ORDER BY total_revenue DESC;

--7.Show the number of orders placed on each day.
SELECT o.date,COUNT(o.order_id) AS total_orders
FROM orders  o
GROUP BY o.date
ORDER BY o.date;

--8.List the top 5 pizzas by revenue.
SELECT p.pizza_id,SUM(p.price * od.quantity) AS total_revenue
FROM order_details od
JOIN pizzas p ON p.pizza_id=od.pizza_id
GROUP BY p.pizza_id
ORDER BY total_revenue DESC
LIMIT 5;

--9.Find the average price of pizzas sold per size.
SELECT size, AVG(price) AS avg_price
FROM pizzas
GROUP BY size;

--10.Retrieve all orders that contain “Hawaiian” pizza.
SELECT DISTINCT o.order_id,pt.name  
FROM orders o
JOIN order_details od ON od.order_id=o.order_id
JOIN pizzas p ON p.pizza_id=od.pizza_id
JOIN pizza_types pt ON pt.pizza_type_id=p.pizza_type_id
WHERE pt.name LIKE '%Hawaiian%' 
ORDER BY o.order_id;



--ADVANCED SQL QUESTIONS
--(Business insights, trends, complex joins, analytics functions)

--1.Find the best-selling pizza size (S, M, L) across all orders.
SELECT p.size,SUM(od.quantity) AS total_sold 
FROM pizzas p
JOIN order_details od ON od.pizza_id=p.pizza_id
GROUP BY p.size
ORDER BY total_sold DESC;

--2.Determine the pizza category that generates the highest revenue.
SELECT pt.category,SUM(p.price * od.quantity) AS total_revenue
FROM pizza_types pt 
JOIN pizzas p ON p.pizza_type_id=pt.pizza_type_id
JOIN order_details od ON od.pizza_id=p.pizza_id
GROUP BY pt.category
ORDER BY total_revenue DESC
LIMIT 2;

--3.Analyze the trend: total daily revenue over time.
SELECT o.date, SUM(p.price * od.quantity) AS daily_revenue
FROM orders o 
JOIN order_details od ON od.order_id=o.order_id
JOIN pizzas p ON p.pizza_id=od.pizza_id
GROUP BY o.date
ORDER BY o.date;

--4.Identify the top 3 pizza types contributing the most to revenue in each category.
WITH ranked_pizzas AS (
	SELECT pt.category, pt.name,
	SUM(p.price * od.quantity) AS total_revenue,
	ROW_NUMBER() OVER (PARTITION BY pt.category 
		ORDER BY SUM(p.price * od.quantity) DESC) AS rank_within_category
	FROM order_details od
	JOIN pizzas p ON od.pizza_id = p.pizza_id
	JOIN pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
	GROUP BY pt.category, pt.name
)
SELECT rp.category, rp.name, rp.total_revenue
FROM ranked_pizzas rp
WHERE rp.rank_within_category <= 3;

--5.Find orders that contain more than 3 pizzas.
SELECT od.order_id,SUM(od.quantity) AS total_pizzas
FROM order_details od
GROUP BY od.order_id
HAVING SUM(od.quantity)>3
ORDER BY od.order_id;

--6.Calculate the average order value (total revenue per order).
SELECT AVG(order_revenue) AS avg_order_value
FROM (
	SELECT o.order_id, SUM(p.price * od.quantity) AS order_revenue
	FROM orders o 
	JOIN order_details od ON od.order_id=o.order_id
	JOIN pizzas p ON p.pizza_id=od.pizza_id
	GROUP BY o.order_id
) AS order_totals;

--7.Determine which pizza type combinations are most frequently ordered together.
SELECT od1.pizza_id AS pizza1, od2.pizza_id AS pizza2, 
COUNT(*) AS combo_count
FROM order_details od1
JOIN order_details od2 
    ON od1.order_id = od2.order_id AND od1.pizza_id < od2.pizza_id
GROUP BY od1.pizza_id, od2.pizza_id
ORDER BY combo_count DESC
LIMIT 20;

--8.Find pizzas that have never been ordered.
SELECT p.pizza_id
FROM pizzas p
LEFT JOIN order_details od ON p.pizza_id = od.pizza_id
WHERE od.pizza_id IS NULL;

--9.Show the proportion of revenue from each pizza category as a percentage of total revenue.
SELECT pt.category,
ROUND(SUM(p.price * od.quantity) * 100.0 /
	(SELECT SUM(p.price * od.quantity) AS total_revenue
	 FROM order_details od 
	 JOIN pizzas p ON p.pizza_id=od.pizza_id ),2) AS revenue_share_percent
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
JOIN pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
GROUP BY pt.category;

--10.Identify peak ordering hours by calculating total quantity of pizzas sold per hour.
SELECT EXTRACT(HOUR FROM o.time) AS order_hour, 
SUM(od.quantity) AS total_pizzas
FROM orders o
JOIN order_details od ON o.order_id = od.order_id
GROUP BY order_hour
ORDER BY total_pizzas DESC;



