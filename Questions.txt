BASIC SQL QUESTIONS

(Simple aggregation, filtering, sorting)

1.List all pizzas along with their sizes and prices.

2.Find all pizza types that belong to the “Chicken” category.

3.Count the total number of pizza types available.

4.Show all orders placed on 2015-01-01.

5.List all pizzas that cost more than $15.

6.Find the total number of orders in the dataset.

7.List all pizzas in ascending order of price.

8.Find the quantity of pizzas in order with order_id = 2.

9.Retrieve all ingredients for the pizza type “The Big Meat Pizza”.

10.Count how many pizzas exist for each size (S, M, L).



INTERMEDIATE SQL QUESTIONS

(Joins, grouping, aggregation, filtering with conditions)

1.List each order with the pizzas ordered and their quantities.

2.Find the total revenue for each pizza (price × quantity).

3.Calculate the total revenue for each order.

4.Find the most popular pizza (highest total quantity sold).

5.List the total number of pizzas sold per pizza category (Chicken, Classic, etc.).

6.Find the total revenue generated by each pizza category.

7.Show the number of orders placed on each day.

8.List the top 5 pizzas by revenue.

9.Find the average price of pizzas sold per size.

10.Retrieve all orders that contain “Hawaiian” pizza.



ADVANCED SQL QUESTIONS

(Business insights, trends, complex joins, analytics functions)

1.Find the best-selling pizza size (S, M, L) across all orders.

2.Determine the pizza category that generates the highest revenue.

3.Analyze the trend: total daily revenue over time.

4.Identify the top 3 pizza types contributing the most to revenue in each category.

5.Find orders that contain more than 3 pizzas.

6.Calculate the average order value (total revenue per order).

7.Determine which pizza type combinations are most frequently ordered together.

8.Find pizzas that have never been ordered.

9.Show the proportion of revenue from each pizza category as a percentage of total revenue.

10.Identify peak ordering hours by calculating total quantity of pizzas sold per hour.


